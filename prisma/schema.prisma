generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  name            String?
  password        String
  role            Role     @default(USER)
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Token           Token[]
  Post            Post[]
  comments        Comment[] // Added opposite relation field
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  Tag         Tag[]
  Comment     Comment[]
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  Post        Post[]
}

model Tag {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  Post        Post[]
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  post        Post     @relation(fields: [postId], references: [id])
  postId      Int
  createdAt   DateTime @default(now())
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}
